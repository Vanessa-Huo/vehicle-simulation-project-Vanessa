#BlueJ class context
comment0.target=Vehicle
comment0.text=\n\ This\ is\ the\ superclass\ for\ Vehicles.\n\ \n
comment1.params=
comment1.target=boolean\ checkHitPedestrian()
comment10.params=
comment10.target=double\ getSpeed()
comment10.text=\n\ An\ accessor\ that\ can\ be\ used\ to\ get\ this\ Vehicle's\ speed.\ Used,\ for\ example,\ when\ a\ vehicle\ wants\ to\ see\n\ if\ a\ faster\ vehicle\ is\ ahead\ in\ the\ lane.\n
comment11.params=
comment11.target=boolean\ isMoving()
comment12.params=
comment12.target=void\ checkLane()
comment13.params=
comment13.target=void\ stopC()
comment14.params=
comment14.target=void\ moveUp()
comment15.params=
comment15.target=void\ moveDown()
comment16.params=
comment16.target=void\ setMoving()
comment2.params=origin
comment2.target=Vehicle(VehicleSpawner)
comment3.params=w
comment3.target=void\ addedToWorld(greenfoot.World)
comment3.text=\n\ This\ method\ is\ called\ automatically\ when\ the\ Vehicle\ is\ added\ to\ the\ World,\ and\ places\n\ the\ Vehicle\ just\ off\ screen\ (centered\ 100\ pixels\ beyond\ the\ center\ of\ the\ lane\ spawner)\n\ so\ it\ will\ appear\ to\ roll\ onto\ the\ screen\ smoothly.\n
comment4.params=
comment4.target=void\ act()
comment4.text=\n\ The\ superclass\ Vehicle's\ act()\ method.\ This\ can\ be\ called\ by\ a\ Vehicle\ subclass\ object\ \n\ (for\ example,\ by\ a\ Car)\ in\ two\ ways\:\n\ -\ If\ the\ Vehicle\ simply\ does\ NOT\ have\ a\ method\ called\ public\ void\ act(),\ this\ will\ be\ called\n\ \ \ instead.\ \n\ -\ subclass'\ act()\ method\ can\ invoke\ super.act()\ to\ call\ this,\ as\ is\ demonstrated\ here.\n
comment5.params=
comment5.target=boolean\ checkEdge()
comment5.text=\n\ A\ method\ used\ by\ all\ Vehicles\ to\ check\ if\ they\ are\ at\ the\ edge.\n\ \n\ Note\ that\ this\ World\ is\ set\ to\ unbounded\ (The\ World's\ super\ class\ is\ (int,\ int,\ int,\ FALSE)\ which\ means\n\ that\ objects\ should\ not\ be\ stopped\ from\ leaving\ the\ World.\ However,\ this\ introduces\ a\ challenge\ as\ there\n\ is\ the\ potential\ for\ objects\ to\ disappear\ off-screen\ but\ still\ be\ fully\ acting\ and\ thus\ wasting\ resources\n\ and\ affecting\ the\ simulation\ even\ though\ they\ are\ not\ visible.\n
comment6.params=
comment6.target=void\ repelPedestrians()
comment7.params=delta
comment7.target=void\ increaseSpeed(double)
comment8.params=nearbyObjects\ minDistance
comment8.target=void\ pushAwayFromObjects(java.util.ArrayList,\ double)
comment9.params=
comment9.target=void\ drive()
comment9.text=\n\ Method\ that\ deals\ with\ movement.\ Speed\ can\ be\ set\ by\ individual\ subclasses\ in\ their\ constructors\n
numComments=17
